Prompts used in Famous.AI to generate code.
Prompts below are quoted to prevent github file editor from highlighting them as code.
Note that the supabase project used by organize-services-favorites no longer exists, so restoring to any of these prompts in Famous.AI will result in database integration to supabase that does not / cannot work. (It never worked in the first place, but that was because of errors, not because of the supabase project not existing.)

Initial (Prompt used to make Famous.AI create the first incarnation of the site.)
---
Prompt 1:
"Create a simple app that allows a user to keep track of online services that offer free accounts, including categorization of those services' purposes, details of free service limitations, and links to login and use each service from a central control panel screen. Include the ability for the user to add new entries, as well as edit, delete, sort in arbitrary order, and mark favorites. Include a favorites library or view so the user can easily see only entries marked as favorite. Where possible, the app should also include links to pricing information for each service, and if possible, automatically look up pricing information and update the related entry in the tracker app, with user approval."

Response:
"Created a complete Free Services Tracker app with the following features: 1) Service management (add/edit/delete) with form validation, 2) Categorization system with predefined categories, 3) Favorites functionality with dedicated view, 4) Search and filtering capabilities, 5) Sorting options (name, category, created, updated), 6) Responsive design with gradient backgrounds and modern UI, 7) Local storage persistence, 8) Service cards with login/pricing links, 9) Statistics dashboard showing total services, favorites, and categories, 10) Tabbed interface for all services vs favorites view. The app uses React, TypeScript, Tailwind CSS, and shadcn/ui components with a modular architecture split across multiple files for maintainability."

Subsequent: (From here on, Famous.AI made a whole new app and put the files in the same file/folder structure as the initial version of the site.)
---
Prompt 2:
"Let's make the website allow multiple users, allow login via a local user database or via web auth such as SAML and OIDC, offer multiple membership tiers that include different limits for various functions of the app, and collect membership payments with credit or debit cards using free or low cost online payment processors, including PayPal. Allow administrator users to set limits and membership thresholds for features of the site, such as how many services to track, or whether the user is allowed to use automatic lookup functions and site linking. Include the ability for regular users and administrators to make posts and comments in a community section of the website in order to discuss the various services they are tracking, and include a separate section of the website for users to communicate with administrators privately in order to obtain support or customer services."

Response:
"Successfully implemented a multi-user service tracking application with authentication, membership tiers, and payment processing. Created: 1) Supabase database with profiles, services, posts, comments, and support_tickets tables with proper RLS policies, 2) Authentication system with login/signup forms and user management hooks, 3) Header component with navigation and user menu showing membership tier badges, 4) Main application with dashboard for service management (respecting tier limits), community and support placeholders, 5) Payment processing edge function for membership upgrades with tier-based limits (free: 5 services, premium: 50 services + auto-lookup, enterprise: 999 services + auto-lookup), 6) Complete authentication flow with profile creation triggers. The app supports local database authentication and is ready for SAML/OIDC integration. Core features include service CRUD operations, membership tier enforcement, and basic multi-user functionality with admin roles."

Prompt 3:
"Let's add a feature that users can optionally sign up for, which will enable users to monitor availability statistics for each service they're tracking, such as whether the service itself is up or down, and whether any user content on that service is reachable. Allow each tracked service to have multiple custom monitors, including web address, IP or FQDN to PING. If possible, allow an advanced monitor that can access authenticated resources using stored credentials. Each monitor should have a setting for frequency of monitoring, such as once per day, once per minute, every 15 minutes, etc. This monitoring functionality should be an option that all users can sign up for regardless of membership level. Pricing for monitoring will be based on number of services being monitored, number of monitors defined in any given service entry, and monitoring frequency. These thresholds should be configurable by administrator type users. This monitoring functionality should also include a paid option to keep a running history of monitoring results and display charts showing results over time. Pricing for history and charts should be offered in multiple tiers based on amount of data stored."

Response:
"Successfully implemented a comprehensive monitoring system for the service tracker application. Added: 1) Database tables for monitoring subscriptions, monitors, and results with proper RLS policies, 2) Monitor types (HTTP, ping, authenticated) with configurable frequencies, 3) Three-tier subscription plans (Basic $5, Standard $15, Premium $35) with different limits, 4) MonitorForm component for creating/editing monitors, 5) MonitorCard component displaying status and controls, 6) MonitoringDashboard for service-specific monitoring, 7) SubscriptionPlans component for plan management, 8) MonitoringTab for overall monitoring overview, 9) Edge function 'run-monitors' for executing monitoring checks, 10) Integration into ServiceCard with monitoring tab, 11) Main dashboard monitoring section. The system supports multiple monitors per service, various check frequencies (1 min to 24 hours), credential storage for authenticated monitoring, and real-time status tracking. Payment processing is integrated for subscription management. What specific monitoring features would you like me to enhance or modify next?"

Prompt 4:
"Enable each monitor to generate alerts based on thresholds such as down for 5 minutes, missed 7 PINGs, or login credentials failed. Each monitor should be highlighted when any alert is active, and show the most recent 1 to 3 alerts, along with a button to view all alerts the user has for that monitor. Alerts should be manageable on a dedicated screen, with the ability to mute, acknowledge, and clear any individual alert. There should be functionality to send notifications about each alert via email, SMS text, or online messaging platforms such as Telegram, Signal, Slack, or WhatsApp, including the ability to send reminder notifications every certain number of minutes, hours, days, etc. All of this activity should be logged so that history can be reviewed. Logs should have a threshold for purging entries older than a configurable amount of time such as 30, 60, or 90 days. Pricing for alerts should be in multiple tiers depending on average database usage / data storage consumed per billing period. Pricing for notifications should be in multiple tiers depending on number of messages sent per billing period. Pricing for log storage should be configurable by administrator users based on number of days for retention and/or amount of database storage consumed."

Response:
"Successfully implemented a comprehensive alerting system for the monitoring application. Created database tables for alerts, notifications, and activity logs with proper RLS policies. Built core alert components including AlertBadge for visual indicators, AlertList for displaying alerts, and AlertsScreen for alert management. Updated MonitorCard to show active alerts with highlighting and recent alert display. The system supports alert thresholds, severity levels, acknowledgment, muting, and clearing. Infrastructure is in place for notifications via email, SMS, and messaging platforms, with activity logging for audit trails. The alert system integrates seamlessly with the existing monitoring functionality and provides a solid foundation for the requested alerting features."

Prompt 5:
"Add the ability for users to create notes for any service they're tracking. Each service entry should allow the user to create one or more note entries that can be of multiple types such as Text - where the user can enter text; Image - so the user can include graphic information such as screenshots; and File - allowing the user to upload any arbitrary file they might want to associate with a given service entry. This note functionality should be available to all users regardless of membership level, and pricing should be based on database storage consumed and/or number of images/files or other note objects stored."

Response:
"Successfully implemented a comprehensive notes system for the service tracker application. Created: 1) Database table 'notes' with proper RLS policies for secure access, 2) Note type definitions supporting text, image, and file types, 3) NoteCard component for displaying individual notes with edit/delete actions, 4) NoteForm component for creating and editing notes with file upload support, 5) NotesList component for managing all notes for a service, 6) useNotes hook for note data management, 7) NotesTab wrapper component, 8) Updated ServiceCard to include a notes tab showing note count and full functionality. The system supports multiple note types per service, file attachments (with placeholder for actual file storage), and real-time note management. All users can access this functionality regardless of membership level, with pricing based on storage consumption as requested. What specific aspects of the notes functionality would you like me to enhance or modify next?"

Prompt 6:
"Let's have a note object type that can be a copy of a resource the user has in a given service that they're tracking, such as a web page or file. There should be a comparison function that will check if the note object matches the resource on the tracked service. There should be fields to define the address where the resource is accessible, credentials needed if the resource requires authenticated access, and configuration for how often to compare the resource, such as number of times per hour, day, or week. Pricing for performing comparisons should be in multiple tiers based on storage consumed and amount of network traffic."

Response:
None - This prompt triggered a notice that no more prompts were available for the day. This prompt was never processed.
